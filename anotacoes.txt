
 docker build .  
 docker build -t apache-docker . --> coloca uma tag para melhot identificação 
  docker run -dit --name NOME_BATISMO_CONTAINER -p 80:80 NOME_IMAGEM  
  docker stop ID_CONTAINER  
  docker start ID_CONTAINER  
  
 https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ 
 https://phoenixnap.com/kb/how-to-commit-changes-to-docker-image 
  
 Step 4: Commit Changes to Image 
 Finally, create a new image by committing the changes using the following syntax: 
  
 sudo docker commit [CONTAINER_ID] [new_image_name] 
  
 Therefore, in our example it will be: 
  
 sudo docker commit deddd39fa163 ubuntu-nmap 
  
 Where deddd39fa163 is the CONTAINER ID and ubuntu-nmap is the name of the new image. 
  
 docker command to commit changes to image 
  
 Your newly created image should now be available on the list of local images. You can verify by checking the image list again: 
  
 sudo docker images 
  
 @joseivangeraldo ➜ /workspaces/html_css (main) $ docker ps 
 @joseivangeraldo ➜ /workspaces/html_css (main) $ docker commit 1e936a216edd apache-1.0 
  
######DELETAR E/OU REMOVER TODOS OS DOCKERS###########
Passo a passo
Para todas as instâncias
docker stop $(docker ps -a -q)

Remove todas as instâncias
docker rm $(docker ps -a -q)

Para todas as imagens
docker image rm $(docker image ls -a -q)

Para todos os volumes
docker volume prune
#####################################################

git config pull.rebase false

###########EVOLUÇÃO DA TELA ################
@joseivangeraldo ➜ /workspaces/ServerPHP_Mysql/LampServer (main) $ docker-compose up -d


joseivangeraldo ➜ /workspaces/ServerPHP_Mysql/LampServer (main) $ docker-compose stop
Stopping lampserver_www_1        ... done
Stopping lampserver_phpmyadmin_1 ... done
Stopping lampserver_db_1         ... done

@joseivangeraldo ➜ /workspaces/ServerPHP_Mysql (main) $ git status
On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   anotacoes.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        LampServer/WebPage/

no changes added to commit (use "git add" and/or "git commit -a")
@joseivangeraldo ➜ /workspaces/ServerPHP_Mysql (main) $ 

   
<p>Abaixo anotações que são pertinentes para a instalação de aplicações rodando em conjunto,
montado em três containers e interligados entre si.
PHP, Apache e Mysql.</p>
<p>Primeiro é preciso criar um arquivo .Yml, que será orquestrado pelo docker-compose"></p>
services:
  db:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: lamp_demo
      MYSQL_USER: lamp_demo
      MYSQL_PASSWORD: password
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - "./db:/docker-entrypoint-initdb.d"
    networks:
      - lamp-docker
  www:
    depends_on:
      - db
    image: php:8.1.1-apache
    volumes:
      - "./:/var/www/html"
    ports:
      - 80:80
      - 443:443
    networks:
      - lamp-docker
  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    ports:
      - 8001:80
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
    networks:
      - lamp-docker
networks:
  lamp-docker:
    driver: bridge

version: '2'
services:
  www:
    image: php:8.1.18-apache-bullseye
    volumes:
      - "./:/var/www/html"
    ports:
      - 80:80
      - 443:
      


FROM ubuntu  → pega a imagem do ubuntu
RUN apt-get update   → atualiza o sistema
RUN apt-get -y install apache2   → faz a instalação automatica
ADD . /var/www/html → adiciona um diretorio a maquina local
ENTRYPOINT apachectl -D FOREGROUND   → Ele ja Inicia o Apache
ENV name Nome_Ambiente → cria a variavel de ambiente
 


FROM php:7.4-fpm
# Arguments defined in docker-compose.yml
ARG user
ARG uid
# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip
# Clear cache
RUN apt-get clean && rm -rf /var/lib/apt/lists/*
# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd
# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer
# Create system user to run Composer and Artisan Commands
RUN useradd -G www-data,root -u $uid -d /home/$user $user
RUN mkdir -p /home/$user/.composer && \
    chown -R $user:$user /home/$user
# Set working directory
WORKDIR /var/www
USER $user


<?php
$connect = mysqli_connect('db','lamp_demo','password','lamp_demo')
    or die ('Não foi possivel conectar');

$query = 'SELECT * FROM blog';
$result = mysqli_query($connect, $query);

echo '<h1>MySQL Content:</h1>';

while($record = mysqli_fetch_assoc($result))
{
    echo '<h2>'.$record['title'].'</h2>';
    echo '<p>'.$record['content'].'</p>';
    echo 'Posted: '.$record['date'];
    echo '<hr>';
}
mysql_close($connect);
?>

gitpod /workspace/DevOps/Lamp-Server (master) $ docker-compose exec www docker-php-ext-install pdo pdo_mysql mysqli

